{"version":3,"sources":["components/auth/auth-service.js","components/auth/Signup.js","components/auth/Login.js","components/Navbar.js","App.js","components/Home.js","serviceWorker.js","index.js"],"names":["AuthService","_this","this","Object","classCallCheck","signup","username","password","service","post","then","response","data","login","loggedin","get","logout","axios","create","baseURL","concat","process","withCredentials","Signup","props","possibleConstructorReturn","getPrototypeOf","call","handleFormSubmit","e","preventDefault","state","setState","saved","catch","error","handleChange","_e$target","target","name","value","defineProperty","_this2","react_default","a","createElement","react_router","to","onSubmit","type","onChange","React","Component","Login","logged","getUser","App","userObj","loggedInUser","err","_this3","Fragment","className","exact","path","render","auth_Signup","userInSession","auth_Login","Boolean","window","location","hostname","match","ReactDOM","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6c21d9f8.chunk.js","sourcesContent":["import axios from 'axios';\n\nclass AuthService {\n  constructor() {\n    let service = axios.create({\n      baseURL: `${process.env.REACT_APP_URL}/auth`,\n      withCredentials: true\n    });\n    this.service = service;\n  }\n\n  signup = (username, password) => {\n    return this.service.post('/signup', { username, password })\n      .then(response => response.data)\n  }\n\n  login = (username, password) => {\n    return this.service.post('/login', { username, password })\n      .then(response => response.data)\n  }\n\n  loggedin = () => {\n    return this.service.get('/currentUser')\n      .then(response => response.data)\n  }\n\n  logout = () => {\n    return this.service.post('/logout')\n      .then(response => response.data)\n  }\n}\n\nexport default AuthService;","import React from 'react';\nimport AuthService from './auth-service';\nimport { Link, Redirect } from 'react-router-dom';\n\nclass Signup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"\",\n      password: \"\",\n      saved: false\n    };\n    this.service = new AuthService();\n  }\n\n  handleFormSubmit = (e) => {\n    e.preventDefault();\n    const username = this.state.username;\n    const password = this.state.password;\n\n    this.service.signup(username, password)\n      .then(() => {\n        this.setState({\n          username: \"\",\n          password: \"\",\n          saved: true\n        });\n        // this.props.getUser(response.user)\n      })\n      .catch(error => {\n        this.setState({\n          username: username,\n          password: password,\n          error: true\n        });\n      })\n  }\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    if(this.state.saved) return <Redirect to={\"/login\"}/>\n    return (\n      <div>\n        <h3>Welcome!, create your account next:</h3>\n\n        <form onSubmit={(e) => this.handleFormSubmit(e)}>\n          <fieldset>\n            <label>Username:</label>\n            <input type=\"text\" name=\"username\" value={this.state.username} onChange={(e) => this.handleChange(e)} />\n          </fieldset>\n\n          <fieldset>\n            <label>Password:</label>\n            <input type=\"password\" name=\"password\" value={this.state.password} onChange={(e) => this.handleChange(e)} />\n          </fieldset>\n\n          <input type=\"submit\" value=\"Sign up\" />\n        </form>\n\n        <h1>{this.state.error ? 'Error' : ''}</h1>\n      </div>\n    )\n  }\n}\n\nexport default Signup;\n","import React from 'react';\nimport AuthService from './auth-service';\nimport { Link, Redirect } from 'react-router-dom';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"\",\n      password: \"\",\n      logged: false\n    };\n    this.service = new AuthService();\n  }\n\n  handleFormSubmit = (e) => {\n    e.preventDefault();\n    const username = this.state.username;\n    const password = this.state.password;\n\n    this.service.login(username, password)\n      .then(response => {\n        this.setState({\n          username: username,\n          password: password,\n          logged: true,\n          error: false\n        });\n        this.props.getUser(response)\n      })\n      .catch(error => {\n        this.setState({\n          username: username,\n          password: password,\n          error: true\n        });\n      })\n  }\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    if(this.state.logged) return <Redirect to={\"/home\"}/>\n    return (\n      <div>\n        <h3>Please, login to our site</h3>\n        <form onSubmit={(e) => this.handleFormSubmit(e)}>\n          <fieldset>\n            <label>Username:</label>\n            <input type=\"text\" name=\"username\" value={this.state.username} onChange={e => this.handleChange(e)} />\n          </fieldset>\n\n          <fieldset>\n            <label>Password:</label>\n            <input type=\"password\" name=\"password\" value={this.state.password} onChange={e => this.handleChange(e)} />\n          </fieldset>\n\n          <input type=\"submit\" value=\"Login\" />\n        </form>\n\n        <h1>{this.state.error ? 'Error' : ''}</h1>\n      </div>\n    )\n  }\n}\n\nexport default Login;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport AuthService from './auth/auth-service';\n\nclass Navbar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedInUser: null\n    };\n    this.service = new AuthService();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({ ...this.state, loggedInUser: nextProps[\"userInSession\"] });\n  }\n\n\n  handleLogout = () => {\n    this.props.logout()\n  }\n\n  render() {\n\n    if (this.props.userInSession) {\n      return (\n        <nav className=\"nav-style\">\n          <ul>\n            <li>Welcome, {this.props.userInSession.username}</li>\n            <li>\n              <Link to='/home'>\n                <button onClick={() => this.handleLogout()}>Logout</button>\n              </Link>\n            </li>\n          </ul>\n        </nav>\n      )\n    } else {\n      return (\n        <nav className=\"nav-style\">\n          <ul>\n            <li><Link to='/signup'>Signup</Link></li>\n            <li><Link to='/login'>Login</Link></li>\n          </ul>\n        </nav>\n      )\n    }\n  }\n}\n\nexport default Navbar;","import React from 'react';\n\nimport './App.css';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport AuthService from './components/auth/auth-service';\nimport Signup from './components/auth/Signup';\nimport Navbar from './components/Navbar';\nimport Login from './components/auth/Login';\nimport Home from './components/Home';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loggedInUser: null\n    };\n    this.service = new AuthService();\n  }\n\n  getUser = (userObj) => {\n    this.setState({\n      loggedInUser: userObj\n    })\n  }\n\n  logout = () => {\n    // console.log(\"logout\")\n    this.service.logout()\n      .then(() => {\n        this.setState({\n          loggedInUser: null\n        });\n      })\n  }\n\n  fetchUser() {\n    if (this.state.loggedInUser === null) {\n      this.service.loggedin()\n        .then(response => {\n          this.setState({\n            loggedInUser: response\n          })\n        })\n        .catch(err => {\n          this.setState({\n            loggedInUser: false\n          })\n        })\n    }\n  }\n\n\n  render() {\n    //this.fetchUser()\n    //console.log(this.state.loggedInUser);\n    if (this.state.loggedInUser) {\n      return (\n        <React.Fragment>\n          <Switch>\n            {/* <Home userInSession={this.state.loggedInUser} exact path='/home' component={Home} logout={() => this.logout()}/> */}\n          </Switch>\n          {/* <footer>Aquí va nuestro footer</footer> */}\n          {/* <div className=\"App\">\n            <header className=\"App-header\">\n              <Navbar userInSession={this.state.loggedInUser} logout={() => this.logout()} />\n              <h1>You are in!!!</h1>\n            </header>\n          </div> */}\n        </React.Fragment>\n      );\n    }\n    return (\n      <React.Fragment>\n        {/* <Redirect to=\"/login\"></Redirect> */}\n\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <Switch>\n              <Route exact path='/signup' render={() => <Signup getUser={this.getUser} userInSession={this.state.loggedInUser} />} />\n              <Route exact path='/login' render={() => <Login getUser={this.getUser} userInSession={this.state.loggedInUser} />} />\n              <Route exact path='/home' render={() => <Login getUser={this.getUser} userInSession={this.state.loggedInUser} />} />\n            </Switch>\n            {/* <Switch>\n              <Route exact path='/signup' render={() => <Signup getUser={(obj) => this.getUser(obj)} />} />\n              <Route exact path='/login' render={() => <Login getUser={(obj) => this.getUser(obj)} />} />\n              <Route exact path='/home' render={() => <Home getUser={(obj) => this.getUser(obj)} />} />\n            </Switch> */}\n          </header>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n\n  // render() {\n  //   this.fetchUser()\n\n  //   if (this.state.loggedInUser) {\n  //     return (\n  //       <React.Fragment>\n  //         {/* <Redirect to=\"/home\"></Redirect> */}\n\n  //         <div className=\"App\">\n  //           <header className=\"App-header\">\n  //             <Navbar userInSession={this.state.loggedInUser} logout={this.logout} />\n  //             <h1>You are in!!!</h1>\n  //           </header>\n  //         </div>\n  //       </React.Fragment>\n  //     );\n  //   } else {\n  //     return (\n  //       <React.Fragment>\n  //         {/* <Redirect to=\"/login\"></Redirect> */}\n\n  //         <div className=\"App\">\n  //           <header className=\"App-header\">\n  //             <h1>NO ESTÁS LOGUEADO</h1>\n  //             <Switch>\n  //               <Route exact path='/signup' render={() => <Signup getUser={this.getUser} />} />\n  //               <Route exact path='/login' render={() => <Login getUser={this.getUser} />} />\n  //             </Switch>\n  //           </header>\n  //         </div>\n  //       </React.Fragment>\n  //     );\n  //   }\n  // }\n\n\n}\n\nexport default App;\n\n// this.fetchUser()\n// console.log(this.state.loggedInUser, \"login\")\n// if (this.state.loggedInUser) {\n//   return (\n//     <React.Fragment>\n//       {/* <Redirect to=\"/\"></Redirect> */}\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <Navbar userInSession={this.state.loggedInUser} logout={this.logout} />\n//         </header>\n//       </div>\n//     </React.Fragment>\n//   );\n// } else {\n//   return (\n//     <React.Fragment>\n//       {/* <Redirect to=\"/login\"></Redirect> */}\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <Navbar userInSession={this.state.loggedInUser} logout={this.logout} />\n//           <Switch>\n//             <Route exact path='/signup' render={() => <Signup getUser={this.getUser} />} />\n//             <Route exact path='/login' render={() => <Login getUser={this.getUser} />} />\n//             <Route exact path='/home' component={Home}/>\n//           </Switch>\n//         </header>\n//       </div>\n//     </React.Fragment>\n//   );\n// }\n// }","import React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedInUser: null\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({ ...this.state, loggedInUser: nextProps[\"userInSession\"] });\n  }\n\n  handleLogout = () => {\n    this.props.logout()\n  }\n\n  render() {\n    if (!this.props.userInSession) return <Redirect to={\"/login\"}/>\n    return (\n      <React.Fragment>\n        <h1>Home page</h1>\n        <Link to='/'>\n          <button onClick={() => this.handleLogout()}>Logout</button>\n        </Link>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Home;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n      <App />\n  </BrowserRouter>, \n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}